{
  "name": "zoetropic",
  "version": "0.2.0",
  "description": "A futuristic library for interacting with REST APIs",
  "author": {
    "name": "Arborbridge Engineering",
    "email": "engineering@arborbridge.com"
  },
  "license": "Apache 2.0",
  "homepage": "https://github.com/arborbridge/zoetropic.js",
  "keywords": [
    "REST",
    "Backbone",
    "Promise"
  ],
  "issues": {
    "url": "https://github.com/arborbridge/zoetropic.js/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/arborbridge/zoetropic.js.git"
  },
  "dependencies": {
    "amdefine": ">=0.1.0",
    "backbone": ">=1.1.0",
    "requirejs": ">=2.1.9",
    "underscore": ">=1.5.2",
    "URIjs": ">=1.11.2",
    "when": ">=2.0.1"
  },
  "devDependencies": {
    "chai": ">=1.8.1",
    "claire": ">=0.3.2",
    "coveralls": ">=2.0.7",
    "istanbul": ">=0.1.34",
    "jshint": ">=1.1.0",
    "mocha": ">=1.13.0",
    "mocha-istanbul": ">=0.2.0",
    "sinon": ">=1.6.0"
  },
  "files": [
    "lib"
  ],
  "main": "lib/zoetropic",
  "scripts": {
    "test": "make test"
  },
  "readme": "Zoetropic.js\n=============\n\n[![Build status](https://travis-ci.org/kennknowles/zoetropic.js.png)](https://travis-ci.org/kennknowles/zoetropic.js)\n[![Test coverage](https://coveralls.io/repos/kennknowles/zoetropic.js/badge.png?branch=master)](https://coveralls.io/r/kennknowles/zoetropic.js)\n[![NPM version](https://badge.fury.io/js/zoetropic.png)](http://badge.fury.io/js/zoetropic)\n[![Dependencies badge](https://gemnasium.com/kennknowles/zoetropic.js.png)](https://gemnasium.com/kennknowles/zoetropic.js)\n\nhttps://github.com/kennknowles/zoetropic.js\n\nA futuristic Javascript library for interacting with REST APIs.\n\nQuick Intro\n-----------\n\nZoetropic interacts with REST APIs in a value-oriented way using _promises_ (close cousins of _futures_).\n\nZoetropic features the following core concepts:\n\n - `Model`: A single resource such as you might find at a url http://api.example.com/users/45\n - `Collection`: A compound resource, generally with filtering, such as might be found at http://api.example.com/users/\n - `Relationship`: Describes how to move from one `Collection` to another.\n - `Api`: A root of the API that stores the `Collection`s by name, such as might be found at http://api.example.com/\n\nFor advanced use, it also has two new concepts to aid in relationship management:\n\n - `Link`: A link from one collection to another. Analogous to a simple hyperlink, but for sets of URLs.\n - `Reference`: A reference from one object to one or many objects in another collections. This is complementary to `Link`.\n\n\nTerse Interface\n---------------\n\nThe interface of zoetropic in a nutshell:\n\n```javascript\nURL = String\n\nAttributes = {String: *}\n\nRelationships = String -> Relationship | undefined\n\nModel = {\n\n  // Core Fields\n  // -----------\n\n  uri           : URL\n  attributes    : { String: * }\n  errors        : { String: String } // Errors collected by attribute\n\n  fetch         : ()         -> Promise Model \n  save          : Attributes -> Promise Model\n  relationships : Relationships\n\n  // Combinators\n  // -----------\n\n  withFields : {...} -> Model   // Override any of the above fields\n\n  overlayRelationships : Relationships                     -> Model\n  overlayAttributes    : Attributes                        -> Model\n  overlayRelated       : ([String] | {String: Collection}) -> Model\n\n  relatedCollection : String -> Collection\n  relatedModel      : String -> Model\n}\n\n\nCollection = {\n\n  // Core Fields\n  // -----------\n\n  uri           : URL\n  data          : {...}  // \"data\" can be anything, but is intended for querystring parameters; passed to fetch\n  models        : {URL : Model}\n\n  fetch         : {...}      -> Promise Collection\n  create        : Attributes -> Promise Model\n  relationships : Relationships\n\n  // Combinators\n  // -----------\n\n  withFields : {...} -> Model   // Override any of the above fields\n\n  overlayData          : {...}                             -> Collection\n  overlayRelationships : Relationships                     -> Collection\n  overlayRelated       : ([String] | {String: Collection}) -> Collection\n\n  relatedCollection    : String -> Collection\n}\n\nLink = { resolve: Collection -> Collection } // How do we go from one collection to another? (it might overapproximate due to REST interface limitations)\n\nRelationship = {\n  link  : Link\n  deref : Collection -> [Model] | Model  // Once we have the other collection fetched, how do we actually get the related models out?\n}\n\n\nApi = {\n  \n  // Core Fields\n  // -----------\n\n  uri         : URL\n  collections : {String: Collection}\n\n  fetch       : () -> Promise Api\n}\n```\n\nImplementations\n---------------\n\nThe most important implementations are `RemoteModel`, `RemoteCollection`, and `RemoteApi`, which form a REST API client.\n\n - `RemoteApi` represents your `/api/`. It understands Django Tastypie schemas and can generate all of your collections simply by calling `fetch`.\n - `RemoteCollection` represents a list endpoint like `/api/book/`. It has additional methods `withData` and `withParam` for adjusting the HTTP requests.\n - `RemoteModel` represents a particular resource like `/api/book/25`.\n\nIn addition, there are `Local*` implementations of each, which are handy for testing with minimal mocking.\n\n - `LocalModel` where `fetch` and `save` each do their work in-memory.\n - `LocalCollection` which just contains the models you give it.\n - `LocalApi` which just contains the collections you give it.\n\n\nCaveats (Special Features?)\n---------------------------\n\n - Though used in large projects, Zoetropic.js is still new. It might be a bit crufty!\n - The module system is assumed to be AMD or Node. Pull requests welcome for other adapters.\n - There is a certain amount of direct support for Django Tastypie. This is a \"feature\" but means that it may be less helpful for other backends, without some customization. Again, pull requests welcome.\n\n\nCopyright & License\n-------------------\n\nCopyright 2013 Kenneth Knowles\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed\nunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\nCONDITIONS OF ANY KIND, either express or implied. See the License for the\nspecific language governing permissions and limitations under the License.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/arborbridge/zoetropic.js/issues"
  },
  "_id": "zoetropic@0.2.0",
  "dist": {
    "shasum": "a298852694fd1378da217e4d24633c05d81576d1"
  },
  "_from": "zoetropic@0.2.0",
  "_resolved": "https://registry.npmjs.org/zoetropic/-/zoetropic-0.2.0.tgz"
}
